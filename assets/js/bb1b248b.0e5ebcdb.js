"use strict";(self.webpackChunksfmcify=self.webpackChunksfmcify||[]).push([[7108],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=d(n),h=i,p=m["".concat(r,".").concat(h)]||m[h]||c[h]||s;return n?a.createElement(p,o(o({ref:t},u),{},{components:n})):a.createElement(p,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<s;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const s={id:"AutomationsRunTimesAPI",title:"Create automations runtimes and frequencies dashboard using REST API",sidebar_label:"Automations Dashboard",tags:["Automation Studio","Rest API","SSJS"]},o=void 0,l={unversionedId:"SFMC API/AutomationsRunTimesAPI",id:"SFMC API/AutomationsRunTimesAPI",title:"Create automations runtimes and frequencies dashboard using REST API",description:"Have you ever wanted to schedule a new automation, and asked yourself: _When should it run_?",source:"@site/docs/SFMC API/AutomationsRunTimesAPI.md",sourceDirName:"SFMC API",slug:"/SFMC API/AutomationsRunTimesAPI",permalink:"/sfmcify.github.io/docs/SFMC API/AutomationsRunTimesAPI",draft:!1,tags:[{label:"Automation Studio",permalink:"/sfmcify.github.io/docs/tags/automation-studio"},{label:"Rest API",permalink:"/sfmcify.github.io/docs/tags/rest-api"},{label:"SSJS",permalink:"/sfmcify.github.io/docs/tags/ssjs"}],version:"current",frontMatter:{id:"AutomationsRunTimesAPI",title:"Create automations runtimes and frequencies dashboard using REST API",sidebar_label:"Automations Dashboard",tags:["Automation Studio","Rest API","SSJS"]},sidebar:"tutorialSidebar",previous:{title:"SFMC API",permalink:"/sfmcify.github.io/docs/category/sfmc-api"},next:{title:"Monitor Automations with WSProxy",permalink:"/sfmcify.github.io/docs/SFMC API/MonitorAutomationsWSProxy"}},r={},d=[{value:"PART I: Authentification",id:"part-i-authentification",level:2},{value:"PART II: Automation\u2019s REST undocumented endpoints",id:"part-ii-automations-rest-undocumented-endpoints",level:2},{value:"Get list of all automations of a Business Unit",id:"get-list-of-all-automations-of-a-business-unit",level:3},{value:"PART III: Parsing schedules",id:"part-iii-parsing-schedules",level:2},{value:"PART IV: Using Lightning Design System in CloudPages",id:"part-iv-using-lightning-design-system-in-cloudpages",level:2},{value:"What is Lightning Design System?",id:"what-is-lightning-design-system",level:3},{value:"Final code",id:"final-code",level:2}],u={toc:d};function c(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Have you ever wanted to schedule a new automation, and asked yourself: ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"When should it run")),"?"),(0,i.kt)("p",null,"As your account keeps developing, it becomes harder to remember and track all automations\u2019 runtimes. This could be problematic if you have a lot of automations that use the same data extensions. In fact, you might have already run into this issue without knowing what was causing it. "),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Having two or more automations run at the same time can cause activities to error randomly.")),(0,i.kt)("p",null,"In this article, I will be presenting a way to create a complementary dashboard to monitor active automations\u2019 runtimes and their frequencies."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Salesforce Marketing Cloud Automations Dashboard using REST API",src:n(8945).Z,width:"2030",height:"562"})),(0,i.kt)("h2",{id:"part-i-authentification"},"PART I: Authentification"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This part has already been covered by other SFMC folks out there, so if you are not familiar with API authentication in Marketing Cloud, I suggest you check ",(0,i.kt)("a",{parentName:"p",href:"https://sfmarketing.cloud/2019/09/27/salesforce-marketing-cloud-api-authentication-using-server-side-javascript/"},"this article")," by Zuzanna first.")),(0,i.kt)("p",null,"However, to reinforce the security of our CloudPages, we need to avoid having our API credentials exposed for all SFMC users. In fact, even though the CloudPage\u2019s code is executed on the server, every SFMC user that have permissions to view CloudPages code can have access to this critical data. I\u2019ll let you check ",(0,i.kt)("a",{parentName:"p",href:"https://charliefay.medium.com/secure-your-api-credentials-for-salesforce-marketing-cloud-development-6bf4936e038e"},"this article")," by Charlie Fay for more details."),(0,i.kt)("p",null,"The code should look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"%%[\nSET @MID = '50000XXXX'\nSET @apiCreds = LOOKUP('REST_Credentials', 'apiCreds', 'MID', @MID)\nSET @apiCreds = DecryptSymmetric(@apiCreds, 'aes', 'INT_PWD', @null, 'INT_SALT', @null, 'INT_IV', @null)\n]%%\n  \n<script runat=\"server\">\n\nPlatform.Load(\"Core\",\"1.1.1\");\n  \nvar apiCreds = Variable.GetValue('@apiCreds');\nvar credentialObj = Platform.Function.ParseJSON(apiCreds);\n\nvar clientId = credentialObj.clientId;\nvar clientSecret = credentialObj.clientSecret;\nvar authURL = credentialObj.authURL;\nvar tenantURL = authURL.substring(0,36);\n\n/* Authentification */\nvar payload = {\n        client_id: clientId,\n        client_secret: clientSecret,\n            grant_type: \"client_credentials\"\n    };\n\nvar url = authURL + '/v2/token';  \nvar contentType = 'application/json';\nvar accessToken;\n\ntry {\n   var accessTokenRequest = HTTP.Post(url, contentType, Stringify(payload));\n   if(accessTokenRequest.StatusCode == 200) {\n        var tokenResponse = Platform.Function.ParseJSON(accessTokenRequest.Response[0]);\n        accessToken = tokenResponse.access_token;\n   }\n} catch (error) {\n    Write(Stringify(error));\n}\n")),(0,i.kt)("h2",{id:"part-ii-automations-rest-undocumented-endpoints"},"PART II: Automation\u2019s REST undocumented endpoints"),(0,i.kt)("h3",{id:"get-list-of-all-automations-of-a-business-unit"},"Get list of all automations of a Business Unit"),(0,i.kt)("p",null,"As far as I know, there is not an official and documented way to get the list of all automations in a Business Unit through the API. Normally, we need to use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.salesforce.com/docs/atlas.en-us.noversion.mc-apis.meta/mc-apis/interacting_with_automation_studio_via_the_web_service_soap_api.htm"},"SOAP")," to interact with Automation Studio, but it doesn\u2019t offer the kind of data needed in this use case. The same thing applies to the Automation object in SSJS or WSProxy. The only option we have left here is to check Marketing Cloud\u2019s UI."),(0,i.kt)("p",null,"We need to know what are the calls that are made internally by Marketing Cloud to get the automations list in the Overview tab in Automation Studio. Let\u2019s go ahead and open Automation Studio and click on Inspect Element then select the Network tab."),(0,i.kt)("p",null,"We will find multiple calls, but the one of interest for us is:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/legacy/v1/beta/automations/automation/definition/")),(0,i.kt)("admonition",{title:"NOTE",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"It is a REST ",(0,i.kt)("strong",{parentName:"p"},"beta")," endpoint. Hence, it is undocumented, so you need to use it with caution and on your own responsibility.")),(0,i.kt)("p",null,"We need to make a REST call to this endpoint using the ",(0,i.kt)("inlineCode",{parentName:"p"},"accessToken")," we\u2019ve got from the authentication. But before discovering how to make this call, let us see what it does actually return. We will be interested in these two parts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"entry"),": a nested array that contains the data we need about automations (including schedules)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"totalResults"),": this is very important because it shows the total number of results in the array")),(0,i.kt)("p",null,"Why is ",(0,i.kt)("inlineCode",{parentName:"p"},"totalResults")," so important? Because the Salesforce Marketing Cloud\u2019s support suggests not using more than 2500 calls per minute with REST API. And because this JSON does not provide data about runtime frequencies and intervals, we need to pull it through a separate REST API call for every automation in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Entry")," array. Therefore, if you think your SFMC\u2019s BU has more than 2500 automation, you might consider editing the script to avoid your API calls getting throttled by Marketing Cloud."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "startIndex": 0,\n  "itemsPerPage": 25,\n  "totalResults": 308,\n  "entry": [\n    {\n      "id": "dV9jX21YOHpNa0tzTGlYNXXXXXXXX",\n      "key": "AUTOMATION KEY",\n      "createdDate": "2020-01-16T14:53:53.177",\n      "name": "AUTOMATION NAME",\n      "description": "Audience Builder autogenerated automation for Contact Suppress and Delete tables for ClientID 50000XXXX",\n      "clientId": 50000XXXX,\n      "status": "Scheduled",\n      "createdBy": {\n        "id": "THEID",\n        "name": "Rachid Mamai",\n        "email": "rachid.mamai@xxxx.xx"\n      },\n      "modifiedDate": "2020-11-26T21:01:27.7",\n      "modifiedBy": {\n        "id": "ANOTHERID",\n        "name": "System"\n      },\n      "processes": [\n        {\n          "id": "PROCESSID",\n          "createdDate": "2020-01-16T14:53:53.27",\n          "name": "Automation Task for Contact Delete DFU activities",\n          "description": "Automation Task for Contact Delete DFU activities for Contact Delete and Suppress tables",\n          "sequence": 0,\n          "status": "Complete",\n          "workerCounts": [\n            {\n              "name": "ELTActivity",\n              "objectTypeId": 425,\n              "count": 2,\n              "status": "Complete"\n            }\n          ],\n          "instanceId": "UDB2cVlSYm9iVSINSTANCEID"\n        }\n      ],\n      "schedule": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/automations/schedule/id",\n      "scheduledTime": "2020-11-27T21:00:00",\n      "startTime": "2020-11-26T21:00:16.757",\n      "completedTime": "2020-11-26T21:01:27.603",\n      "lastRunTime": "2020-11-26T21:00:16.757",\n      "lastRunInstance": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/bulk/automations/automation/instance/id",\n      "instanceId": "instanceid",\n      "automationInstance": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/bulk/automations/automation/instance/id",\n      "isPlatformObject": false,\n      "notifications": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/hub/notifications/id",\n      "automationType": "scheduled",\n      "lastRunStatus": "Complete"\n    },\n    {\n      "id": "AUTOMATION2ID",\n      "key": "AUTOMATION2NAME",\n      "createdDate": "2019-02-26T16:03:41.65",\n      "name": "AUTOMATION2NAME",\n      "description": "",\n      "clientId": 50000XXXX,\n      "status": "Ready",\n      "createdBy": {\n        "id": "ANID",\n        "name": "Rachid Mamai",\n        "email": "rachid.mamai@xxxxx.xxx"\n      },\n      "modifiedDate": "2020-11-26T20:41:34.253",\n      "modifiedBy": {\n        "id": "ANOTHERID",\n        "name": "System"\n      },\n      "processes": [\n        {\n          "id": "PROCESSID",\n          "createdDate": "2020-08-18T15:35:10.653",\n          "name": "",\n          "description": "",\n          "sequence": 0,\n          "status": "Complete",\n          "workerCounts": [\n            {\n              "name": "QueryDefinition",\n              "objectTypeId": 300,\n              "count": 1,\n              "status": "Complete"\n            }\n          ],\n          "instanceId": "INSTANCEID"\n        },\n        {\n          "id": "ANOTHERID",\n          "createdDate": "2020-08-18T15:35:10.653",\n          "name": "",\n          "description": "",\n          "sequence": 1,\n          "status": "Complete",\n          "workerCounts": [\n            {\n              "name": "QueryDefinition",\n              "objectTypeId": 300,\n              "count": 1,\n              "status": "Complete"\n            }\n          ],\n          "instanceId": "INSTANCEID"\n        },\n        {\n          "id": "ANID",\n          "createdDate": "2020-08-18T15:35:10.653",\n          "name": "",\n          "description": "",\n          "sequence": 2,\n          "status": "Complete",\n          "workerCounts": [\n            {\n              "name": "ImportDefinition",\n              "objectTypeId": 43,\n              "count": 1,\n              "status": "Complete"\n            }\n          ],\n          "instanceId": "ANOTHERINSTANCEID"\n        },\n        {\n          "id": "ANDANOTHERIDWOUAAAH",\n          "createdDate": "2020-08-18T15:35:10.653",\n          "name": "",\n          "description": "",\n          "sequence": 3,\n          "status": "Complete",\n          "workerCounts": [\n            {\n              "name": "QueryDefinition",\n              "objectTypeId": 300,\n              "count": 1,\n              "status": "Complete"\n            }\n          ],\n          "instanceId": "LIKEALWAYSANOTHERID"\n        },\n        {\n          "id": "ANDANOTHERONE",\n          "createdDate": "2020-08-18T15:35:10.653",\n          "name": "",\n          "description": "",\n          "sequence": 4,\n          "status": "Complete",\n          "workerCounts": [\n            {\n              "name": "QueryDefinition",\n              "objectTypeId": 300,\n              "count": 1,\n              "status": "Complete"\n            }\n          ],\n          "instanceId": "ANOTHERONE"\n        }\n      ],\n      "startTime": "2020-11-26T20:40:13.79",\n      "completedTime": "2020-11-26T20:41:34.127",\n      "lastRunTime": "2020-11-26T20:40:13.79",\n      "lastRunInstance": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/bulk/automations/automation/instance/id",\n      "instanceId": "instanceid",\n      "automationInstance": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/bulk/automations/automation/instance/id",\n      "isPlatformObject": false,\n      "notifications": "https://tenantid.rest.marketingcloudapis.com/legacy/v1/beta/hub/notifications/id",\n      "automationType": "scheduled",\n      "lastRunStatus": "Complete"\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"We can modify the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"automationsCount")," to handle the number of results we want to be pulled. It\u2019s value is assigned to the ",(0,i.kt)("inlineCode",{parentName:"p"},"top")," parameter on our endpoint. We can add other parameters like ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," to sort results by lastRunTime for example."),(0,i.kt)("p",null,"After making the API call, we need to parse the results using ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"ParseJSON"))," function. Then, we need to loop through ",(0,i.kt)("inlineCode",{parentName:"p"},"entry")," elements. In the code below, we are pulling 25 automation and displaying their descriptions. We will update this code in the next chapter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'<script runat="server">\n  Platform.Load("Core","1.1.1");\n\n  /* The number of autoamtions we want to pull */\n  var automationsCount = 25;\n\n  url = tenantURL + ".rest.marketingcloudapis.com/legacy/v1/beta/automations/automation/definition/?$top="+ automationsCount +"&$skip=0&$sort=lastRunTime%20desc";\n  var headerNames = ["Authorization"];\n  var headerValues = ["Bearer " + accessToken];\n  var automations, automationContent, automationDescription;\n  \n  try {\n    automations = HTTP.Get(url, headerNames, headerValues);\n    automationContent = Platform.Function.ParseJSON(Platform.Function.ParseJSON(Stringify(automations)).Content);\n    \n    // loop through all results\n      if(automationContent.entry.length >= 1) {\n          for (i = 0; i < automationContent.entry.length; i++) {\n            automationDescription = automationContent.entry[i].description;\n            Write(automationDescription + "</br>");\n            /* Do other stuff */\n           }\n     }\n  } catch (e) {\n   e = Stringify(e).replace(/[\\n\\r]/g, \'\')\n   Write(e);\n  }\n  <\/script>\n')),(0,i.kt)("h2",{id:"part-iii-parsing-schedules"},"PART III: Parsing schedules"),(0,i.kt)("p",null,"Now, we will be using another undocumented REST API endpoint:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/automation/v1/automations/{automationid}")),(0,i.kt)("p",null,"To have a better understanding of the code presented later on, let\u2019s take a look at the JSON response returned by this endpoint. As we can see, there is a lot of information returned, but we will be focusing on the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"schedule"))," object as it contains all the information we need. It returns the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"startdate")),", the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"icalRecur"))," which is crucial to construct automation\u2019s recurrences through the day/week, the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"scheduleStatus"))," as long as the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"endDate")),". This JSON contains also data about automation steps which can be exploited to enrich the UI."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "d057f44c-9333-4154-999c-XXXXXXXX",\n  "name": "JB_DIXXXXX",\n  "description": "",\n  "key": "ea66db19-de12-41be-1dd4-940XXXXXX",\n  "typeId": 1,\n  "type": "scheduled",\n  "statusId": 6,\n  "status": "Scheduled",\n  "categoryId": 486,\n  "lastRunTime": "2020-11-30T12:31:34.97",\n  "lastRunInstanceId": "338df884-a4b6-421d-a026-740cXXXXXX",\n  "schedule": {\n    "id": "bf46c8dd-6ee9-43b4-94b2-5931XXXXX",\n    "typeId": 2,\n    "startDate": "2020-07-13T11:30:00",\n    "endDate": "2079-06-06T00:00:00",\n    "scheduledTime": "2020-11-30T20:30:00",\n    "rangeTypeId": 1,\n    "occurrences": 516277,\n    "pattern": "01",\n    "icalRecur": "FREQ=HOURLY;UNTIL=20790606T080000;INTERVAL=1",\n    "timezoneName": "Romance Standard Time",\n    "scheduleStatus": "active",\n    "timezoneId": 7\n  },\n  "steps": [\n    {\n      "id": "8b64e4e2-bd0d-468a-b1f8-8aaeXXXXXX",\n      "name": "",\n      "step": 1,\n      "activities": [\n        {\n          "id": "c4251624-bb73-44fa-8c74-a066XXXXXX",\n          "name": "JB_DISPOSITIF_EOS_CIBLAGE",\n          "activityObjectId": "beede9ae-85e9-4aa1-892d-27320fXXXXX",\n          "objectTypeId": 300,\n          "displayOrder": 1,\n          "targetDataExtensions": [\n            {\n              "id": "3bb4b708-e5c1-ea11-b83a-b88303XXXXX",\n              "name": "EOS_CIBLAGE_MDD",\n              "key": "09B3E99B-7131-4139-BF1A-DFB402XXXXXX",\n              "description": "",\n              "rowCount": 863\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "73fd99c7-edf3-4b26-9196-8418eXXXXX",\n      "name": "",\n      "step": 2,\n      "activities": [\n        {\n          "id": "436cc2b4-4305-42ef-9cd2-8f9214XXXXX",\n          "name": "DispositXXXXX",\n          "activityObjectId": "d40bef32-b6e5-4c1c-8246-8602XXXXX",\n          "objectTypeId": 952,\n          "displayOrder": 1\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"At this time, we are going to construct the endpoint id parameter automatically to pull all automations schedules. Then we will parse the JSON to construct different data we need to show in our table. We start by checking if the status of the automation is active, then split ",(0,i.kt)("strong",{parentName:"p"},"icalRecur")," to get the schedule\u2019s frequency, interval, and days. Then, depending on the frequency, we need to format the schedule string differently."),(0,i.kt)("p",null,"Afterward, we need to store this information into a data extension. This would avoid us unnecessary API Calls if the data has not changed. The data extension named ",(0,i.kt)("strong",{parentName:"p"},"AUTOMATIONS","_","SCHEDULES")," should look like this:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Length"),(0,i.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Name"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Schedule"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scheduleStatus"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"80"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scheduledTime"),(0,i.kt)("td",{parentName:"tr",align:null},"Date"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scheduleFrequency"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"255"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scheduleInterval"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"50"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scheduleDays"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"255"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scheduleHours"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"description"),(0,i.kt)("td",{parentName:"tr",align:null},"Text"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"secret"),(0,i.kt)("td",{parentName:"tr",align:null},"Number"),(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"secret")," column is a way to lookup all records of a data extension by using the condition ",(0,i.kt)("strong",{parentName:"p"},"secret = 1")," on lookup functions.")),(0,i.kt)("p",null,"Now, let\u2019s have a look at the code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'try {\n  automations = HTTP.Get(url, headerNames, headerValues);\n  automationContent = Platform.Function.ParseJSON(Platform.Function.ParseJSON(Stringify(automations)).Content);\n  \n  // loop through all results\n    if(automationContent.entry.length > 0 && automationContent.entry.length !== null) {\n        for (i = 0; i < automationContent.entry.length; i++) {\n          automationDescription = automationContent.entry[i].description;\n          /* Getting schedule */ \n          if(Platform.Function.ParseJSON(automationContent.entry[i].id) !== ""  && Platform.Function.ParseJSON(automationContent.entry[i].id) !== null) {\n          url = tenantURL + ".rest.marketingcloudapis.com/automation/v1/automations/" + Platform.Function.ParseJSON(automationContent.entry[i].id);\n          headerNames = ["Authorization"];\n          headerValues = ["Bearer " + accessToken];\n\n          try {\n            automation = HTTP.Get(url, headerNames, headerValues);\n            automationScheduleObject = Platform.Function.ParseJSON(Platform.Function.ParseJSON(Stringify(automation)).Content);\n\n            if(typeof automationScheduleObject.schedule.icalRecur !== "undefined" && automationScheduleObject.schedule.scheduleStatus === "active"){\n\n              // Split the schedule object to different columns \n              scheduleSplit = automationScheduleObject.schedule.icalRecur.split(\';\');\n              if(typeof scheduleSplit[0] !== \'undefined\') scheduleFrequency = scheduleSplit[0];\n              if(typeof scheduleSplit[2] !== \'undefined\') scheduleInterval = scheduleSplit[2];\n              \n              /* When automation scheduled to run everyday, replace empty by Everyday */\n              scheduleDays = (typeof scheduleSplit[3] !== \'undefined\' ? scheduleSplit[3].split("=")[1] : \'Everyday\');\n              \n              /* Get scheduletime on a Date object to manipulate hours */\n              var scheduleToDate = new Date(automationScheduleObject.schedule.scheduledTime);\n              var startingHour = scheduleToDate.getHours();\n              var startingMinutes = scheduleToDate.getMinutes();\n              \n              scheduleFrequencySplitted = scheduleFrequency.split(\'=\')[1];\n\n              /* When frequency is HOURLY, get all daily schedules by adding the interval to the scheduletime */\n              if(scheduleFrequencySplitted === \'HOURLY\') {\n               var hoursInterval = scheduleInterval.split(\'=\');\n               var initialInterval = parseInt(hoursInterval[1]);\n               \n               var hoursNumber = 24/initialInterval;\n               hoursSchedule = "";\n               for(j = 0; j < hoursNumber; j++){\n                hoursSchedule += scheduleToDate.getHours() + ":" + startingMinutes +" / ";\n                scheduleToDate.setHours(scheduleToDate.getHours()+initialInterval);\n               }\n              } else {\n                      hoursSchedule = scheduleToDate.getHours() + ":"+ startingMinutes +" / ";\n              }\n              \n              /* Write rows to a Data Extension */\n              rows = Platform.Function.UpsertData("AUTOMATIONS_SCHEDULE",["Name"],[automationContent.entry[i].name]\n                                                      ,["schedule","scheduleStatus","scheduledTime","scheduleFrequency",  \n                                                      "scheduleInterval", "scheduleDays", "hoursSchedule"],\n                                                      [automationScheduleObject.schedule.icalRecur,\n                                                      automationScheduleObject.schedule.scheduleStatus,\n                                                      automationScheduleObject.schedule.scheduledTime, \n                                                      scheduleFrequency, scheduleInterval, scheduleDays,\n                                                      hoursSchedule]);\n\n            }\n           } catch (e) {\n           e = Stringify(e).replace(/[\\n\\r]/g, \'\')\n             Write(e);\n           }\n          }\n      }\n   }\n} catch (e) {\n e = Stringify(e).replace(/[\\n\\r]/g, \'\')\n Write(e);\n}\n')),(0,i.kt)("h2",{id:"part-iv-using-lightning-design-system-in-cloudpages"},"PART IV: Using Lightning Design System in CloudPages"),(0,i.kt)("h3",{id:"what-is-lightning-design-system"},"What is Lightning Design System?"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},"The\xa0",(0,i.kt)("strong",{parentName:"em"},"Salesforce Lightning Design System"),"\xa0(SLDS) helps you build applications with the look and feel of\xa0",(0,i.kt)("strong",{parentName:"em"},"Lightning"),"\xa0Experience without writing a single line of CSS. SLDS is a CSS framework that gives you access to the icons, color palettes, and font that our developers use to create\xa0",(0,i.kt)("strong",{parentName:"em"},"Lightning"),"\xa0Experience."))),(0,i.kt)("p",null,"What\u2019s better than having Lightning design on a landing page inside Marketing Cloud? Your account\u2019s users will have the feeling that the page is actually provided by SFMC, and not a custom developed CloudPage."),(0,i.kt)("p",null,"To use Lightning Design System inside our CloudPage, we need to download the resources zip available on ",(0,i.kt)("a",{parentName:"p",href:"https://www.lightningdesignsystem.com/resources/downloads/"},"this page"),". After unzipping the file, we need to copy the content of the file named:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"salesforce-lightning-design-system.min.css")),(0,i.kt)("p",null,"Then, paste it into a CSS resource landing page, grab it\u2019s url and use it in our main CloudPage\u2019s head:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<link rel="stylesheet" href="YOUR_CSS_PAGE_URL" />\n')),(0,i.kt)("p",null,"After that, we will use the official documentation which is very well presented by Salesforce to chose tens of ways to present our data. I have chosen ",(0,i.kt)("a",{parentName:"p",href:"https://www.lightningdesignsystem.com/components/data-tables/#site-main-content"},"Data Tables")," and ",(0,i.kt)("a",{parentName:"p",href:"https://www.lightningdesignsystem.com/components/page-headers/#site-main-content"},"Page Headers"),". I will let you discover the other objects by yourself."),(0,i.kt)("p",null,"We are using the code below for the header as long with the Opportunity object\u2019s icon."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Header Start --\x3e\n<div class="slds-m-around_large">\n    <div class="slds-page-header">\n        <div class="slds-page-header__row">\n            <div class="slds-page-header__col-title">\n                <div class="slds-media">\n                    <div class="slds-media__figure">\n                        <span class="slds-icon_container slds-icon-standard-opportunity" title="opportunity">\n                            <svg class="slds-icon slds-page-header__icon" aria-hidden="true">\n                                <use xlink:href="/assets/icons/standard-sprite/svg/symbols.svg#opportunity"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Automation</span>\n                        </span>\n                    </div>\n                    <div class="slds-media__body">\n                        <div class="slds-page-header__name">\n                            <div class="slds-page-header__name-title">\n                                <h1>\n                                    <span class="slds-page-header__title slds-truncate">Automations Schedules Listing</span>\n                                </h1>\n                            </div>\n                        </div>\n                        <p class="slds-page-header__name-meta">All your automations schedules in one page</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \x3c!-- Header End --\x3e\n')),(0,i.kt)("p",null,"Then, we create a table and its headers. The parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"slds-max-medium-table_stacked-horizontal")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"slds-table_fixed-layout")," are important to limit the table\u2019s width and have columns content resized."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<table class="slds-table slds-table_cell-buffer slds-table_bordered slds-table_striped slds-table_col-bordered slds-max-medium-table_stacked-horizontal slds-table_fixed-layout">\n<thead>\n    <tr class="slds-line-height_reset">\n    <th class="" scope="col">\n        <div class="slds-truncate" title="Automation Name">Automation Name</div>\n    </th>\n    <th class="" scope="col">\n        <div class="slds-truncate" title="Description">Description</div>\n    </th>\n    <th class="" scope="col">\n        <div class="slds-truncate" title="Status">Status</div>\n    </th>\n    <th class="" scope="col">\n        <div class="slds-truncate" title="Schedule Frequency">Schedule Frequency</div>\n    </th>\n    <th class="" scope="col">\n        <div class="slds-truncate" title="Schedule Days">Schedule Days</div>\n    </th>\n    <th class="" scope="col">\n        <div class="slds-truncate" title="Schedule Hours">Schedule Hours</div>\n    </th>\n    </tr>\n</thead>\n<tbody>\n')),(0,i.kt)("p",null,"After that, we need to create a row and cell for each automation. We can do that using ",(0,i.kt)("inlineCode",{parentName:"p"},"Write")," function inside the automations loop presented before in the article. ",(0,i.kt)("inlineCode",{parentName:"p"},"Title")," attribute is important to show cells\u2019 content on mouse hover when data is truncated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'Write(\'<tr class="slds-hint-parent"><th data-label="Automation Name" scope="row"><div class="slds-truncate" title=\'+automationContent.entry[i].name+\'>\'+ automationContent.entry[i].name +\'</div></td>\');\nWrite(\'<th data-label="Description" scope="row"><div class="slds-truncate" title="\'+automationDescription+\'" >\'+ automationDescription +\'</div></td>\');\nWrite(\'<th data-label="Status" scope="row"><div class="slds-truncate" title="\'+automationScheduleObject.schedule.scheduleStatus+\'" >\'+ automationScheduleObject.schedule.scheduleStatus +\'</div></td>\');\nWrite(\'<th data-label="Schedule Frequency" scope="row"><div class="slds-truncate" title="\'+scheduleFrequencySplitted+\'" >\'+ scheduleFrequencySplitted +\'</div></td>\');\nWrite(\'<th data-label="Schedule Days" scope="row"><div class="slds-truncate" title="\'+scheduleDays+\'" >\'+ scheduleDays +\'</div></td>\');\nWrite(\'<th data-label="Schedule Hours" scope="row"><div class="slds-truncate" title="\'+hoursSchedule+\'" >\'+ hoursSchedule +\'</div></td>\');\nWrite(\'</tr>\');\n')),(0,i.kt)("p",null,"The page will look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Salesforce Marketing Cloud Automations Dashboard using REST API",src:n(8945).Z,width:"2030",height:"562"})),(0,i.kt)("h2",{id:"final-code"},"Final code"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Please note that there is a lot of things to improve and to do differently to parse and show this data. I tried to focus on the essential and new parts, I\u2019ll let you innovate and customize the code according to your needs. ")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For example, to avoid making all those API calls every time you access the CloudPage, you can create a Preferences data extension that you lookup at the beginning of the script. This data extension can contain parameters like automationCount, refreshData, automationStatus (to decide if you want to pull all automations, or only active ones),\u2026")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'%%[\n  SET @MID = \'50000XXXX\'\n  SET @apiCreds = LOOKUP(\'REST_Credentials\', \'apiCreds\', \'MID\', @MID)\n  SET @apiCreds = DecryptSymmetric(@apiCreds, \'aes\', \'INT_PWD\', @null, \'INT_SALT\', @null, \'INT_IV\', @null)\n  ]%%\n  <!doctype html>\n  <html>\n    <head>\n      <link rel="stylesheet" href="https://cloud.actu.lamutuellegenerale.fr/salesforce-lightning-design-system.min.css" />\n      <style>\n      html {background-color: white}\n      </style>\n    </head>\n    <body>\n    \x3c!-- Header Start --\x3e\n    <div class="slds-m-around_large">\n    <div class="slds-page-header">\n    <div class="slds-page-header__row">\n      <div class="slds-page-header__col-title">\n        <div class="slds-media">\n          <div class="slds-media__figure">\n            <span class="slds-icon_container slds-icon-standard-opportunity" title="opportunity">\n              <svg class="slds-icon slds-page-header__icon" aria-hidden="true">\n                <use xlink:href="/assets/icons/standard-sprite/svg/symbols.svg#opportunity"></use>\n              </svg>\n              <span class="slds-assistive-text">Automation</span>\n            </span>\n          </div>\n          <div class="slds-media__body">\n            <div class="slds-page-header__name">\n              <div class="slds-page-header__name-title">\n                <h1>\n                  <span class="slds-page-header__title slds-truncate">Automations Schedules Listing</span>\n                </h1>\n              </div>\n            </div>\n            <p class="slds-page-header__name-meta">All your automations schedules in one page</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  \x3c!-- Header End --\x3e\n  \n  \x3c!-- Table headers --\x3e\n  <table class="slds-table slds-table_cell-buffer slds-table_bordered slds-table_striped slds-table_col-bordered slds-max-medium-table_stacked-horizontal slds-table_fixed-layout">\n    <thead>\n      <tr class="slds-line-height_reset">\n        <th class="" scope="col">\n          <div class="slds-truncate" title="Automation Name">Automation Name</div>\n        </th>\n        <th class="" scope="col">\n          <div class="slds-truncate" title="Description">Description</div>\n        </th>\n        <th class="" scope="col">\n          <div class="slds-truncate" title="Status">Status</div>\n        </th>\n        <th class="" scope="col">\n          <div class="slds-truncate" title="Schedule Frequency">Schedule Frequency</div>\n        </th>\n        <th class="" scope="col">\n          <div class="slds-truncate" title="Schedule Days">Schedule Days</div>\n        </th>\n        <th class="" scope="col">\n          <div class="slds-truncate" title="Schedule Hours">Schedule Hours</div>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n  \n  \x3c!-- SSJS Script start--\x3e\n  <script runat="server">\n  Platform.Load("Core","1.1.1");\n    \n  /* script execution options */\n  var clearDataExtension = false;\n  var automationsCount = 25;\n  \n  /* Passing apiCreds value from AMPScript to SSJS */\n  var apiCreds = Variable.GetValue(\'@apiCreds\');\n  var credentialObj = Platform.Function.ParseJSON(apiCreds);\n  \n  var clientId = credentialObj.clientId;\n  var clientSecret = credentialObj.clientSecret;\n  var authURL = credentialObj.authURL;\n  var tenantURL = authURL.substring(0,36);\n  \n  /* Authentification */\n  var payload = {\n          client_id: clientId,\n          client_secret: clientSecret,\n         grant_type: "client_credentials"\n      };\n  \n  var url = authURL + \'/v2/token\';  \n  var contentType = \'application/json\';\n  var accessToken;\n    \n  try {\n     var accessTokenRequest = HTTP.Post(url, contentType, Stringify(payload));\n     if(accessTokenRequest.StatusCode == 200) {\n          var tokenResponse = Platform.Function.ParseJSON(accessTokenRequest.Response[0]);\n          accessToken = tokenResponse.access_token;\n     }\n  } catch (error) {\n      Write(Stringify(error));\n  }\n  \n  /* Clear data extension before populating new data */\n  if(clearDataExtension) var DERows = Platform.Function.DeleteData(\'AUTOMATIONS_SCHEDULE\',[\'secret\'],[1]);\n    \n  /* Getting automations */ \n  url = tenantURL + ".rest.marketingcloudapis.com/legacy/v1/beta/automations/automation/definition/?$top="+ automationsCount +"&$skip=0&$sort=lastRunTime%20desc";\n  var headerNames = ["Authorization"];\n  var headerValues = ["Bearer " + accessToken];\n  var automations, automationContent, automation, automationScheduleObject, automationDescription;\n  var rows, scheduleSplit, scheduleFrequency, endDate, scheduleInterval, scheduleDays, hoursSchedule, scheduleFrequencySplitted;\n  \n  try {\n    automations = HTTP.Get(url, headerNames, headerValues);\n    automationContent = Platform.Function.ParseJSON(Platform.Function.ParseJSON(Stringify(automations)).Content);\n    \n    // loop through all results\n      if(automationContent.entry.length > 0 && automationContent.entry.length !== null) {\n          for (i = 0; i < automationContent.entry.length; i++) {\n            automationDescription = automationContent.entry[i].description;\n            /* Getting schedule */ \n            if(Platform.Function.ParseJSON(automationContent.entry[i].id) !== ""  && Platform.Function.ParseJSON(automationContent.entry[i].id) !== null) {\n            url = tenantURL + ".rest.marketingcloudapis.com/automation/v1/automations/" + Platform.Function.ParseJSON(automationContent.entry[i].id);\n            headerNames = ["Authorization"];\n            headerValues = ["Bearer " + accessToken];\n  \n            try {\n              automation = HTTP.Get(url, headerNames, headerValues);\n              automationScheduleObject = Platform.Function.ParseJSON(Platform.Function.ParseJSON(Stringify(automation)).Content);\n  \n              if(typeof automationScheduleObject.schedule.icalRecur !== "undefined" && automationScheduleObject.schedule.scheduleStatus === "active"){\n  \n                // Split the schedule object to different columns \n                scheduleSplit = automationScheduleObject.schedule.icalRecur.split(\';\');\n                if(typeof scheduleSplit[0] !== \'undefined\') scheduleFrequency = scheduleSplit[0];\n                if(typeof scheduleSplit[2] !== \'undefined\') scheduleInterval = scheduleSplit[2];\n                \n                /* When automation scheduled to run everyday, replace empty by Everyday */\n                scheduleDays = (typeof scheduleSplit[3] !== \'undefined\' ? scheduleSplit[3].split("=")[1] : \'Everyday\');\n                \n                /* Get scheduletime on a Date object to manipulate hours */\n                var scheduleToDate = new Date(automationScheduleObject.schedule.scheduledTime);\n                var startingHour = scheduleToDate.getHours();\n                var startingMinutes = scheduleToDate.getMinutes();\n                \n                scheduleFrequencySplitted = scheduleFrequency.split(\'=\')[1];\n  \n                /* When frequency is HOURLY, get all daily schedules by adding the interval to the scheduletime */\n                if(scheduleFrequencySplitted === \'HOURLY\') {\n                 var hoursInterval = scheduleInterval.split(\'=\');\n                 var initialInterval = parseInt(hoursInterval[1]);\n                 \n                 var hoursNumber = 24/initialInterval;\n                 hoursSchedule = "";\n                 for(j = 0; j < hoursNumber; j++){\n                  hoursSchedule += scheduleToDate.getHours() + ":" + startingMinutes +" / ";\n                  scheduleToDate.setHours(scheduleToDate.getHours()+initialInterval);\n                 }\n                } else {\n                  hoursSchedule = scheduleToDate.getHours() + ":"+ startingMinutes +" / ";\n                }\n                \n                // Writing table elements\n                Write(\'<tr class="slds-hint-parent"><th data-label="Automation Name" scope="row"><div class="slds-truncate" title=\'+automationContent.entry[i].name+\'>\'+ automationContent.entry[i].name +\'</div></td>\');\n                Write(\'<th data-label="Description" scope="row"><div class="slds-truncate" title="\'+automationDescription+\'" >\'+ automationDescription +\'</div></td>\');\n                Write(\'<th data-label="Status" scope="row"><div class="slds-truncate" title="\'+automationScheduleObject.schedule.scheduleStatus+\'" >\'+ automationScheduleObject.schedule.scheduleStatus +\'</div></td>\');\n                Write(\'<th data-label="Schedule Frequency" scope="row"><div class="slds-truncate" title="\'+scheduleFrequencySplitted+\'" >\'+ scheduleFrequencySplitted +\'</div></td>\');\n                Write(\'<th data-label="Schedule Days" scope="row"><div class="slds-truncate" title="\'+scheduleDays+\'" >\'+ scheduleDays +\'</div></td>\');\n                Write(\'<th data-label="Schedule Hours" scope="row"><div class="slds-truncate" title="\'+hoursSchedule+\'" >\'+ hoursSchedule +\'</div></td>\');\n                Write(\'</tr>\');\n                \n                /* Write rows to a Data Extension */\n                rows = Platform.Function.UpsertData("AUTOMATIONS_SCHEDULE",["Name"],[automationContent.entry[i].name]\n                                                        ,["schedule","scheduleStatus","scheduledTime","scheduleFrequency",  \n                                                        "scheduleInterval", "scheduleDays", "scheduleHours", "description"],\n                                                        [automationScheduleObject.schedule.icalRecur,\n                                                        automationScheduleObject.schedule.scheduleStatus,\n                                                        automationScheduleObject.schedule.scheduledTime, \n                                                        scheduleFrequency, scheduleInterval, scheduleDays,\n                                                        hoursSchedule, automationDescription]);\n  \n              }\n             } catch (e) {\n             e = Stringify(e).replace(/[\\n\\r]/g, \'\')\n               Write(e);\n             }\n            }\n        }\n     }\n  } catch (e) {\n   e = Stringify(e).replace(/[\\n\\r]/g, \'\')\n   Write(e);\n  }\n    \n  \n<\/script>\n</tbody>\n</table>\n</div>\n</body>\n</html>\n')))}c.isMDXComponent=!0},8945:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/automationsDashboard-afbcbe91ece6e9c49329b3c310e1bad0.png"}}]);