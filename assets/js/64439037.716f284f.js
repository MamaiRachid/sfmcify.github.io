"use strict";(self.webpackChunksfmcify=self.webpackChunksfmcify||[]).push([[538],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>d});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var u=a.createContext({}),l=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},m=function(t){var e=l(t.components);return a.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,u=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),p=l(n),d=o,h=p["".concat(u,".").concat(d)]||p[d]||c[d]||i;return n?a.createElement(h,r(r({ref:e},m),{},{components:n})):a.createElement(h,r({ref:e},m))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,r=new Array(i);r[0]=p;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=t,s.mdxType="string"==typeof t?t:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9266:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const i={id:"MonitorAutomationsWSProxy",title:"A Way to Monitor Active Automations Status Using WSProxy",sidebar_label:"Monitor Automations with WSProxy",tags:["Automation Studio","WSProxy","SSJS"]},r=void 0,s={unversionedId:"SFMC API/MonitorAutomationsWSProxy",id:"SFMC API/MonitorAutomationsWSProxy",title:"A Way to Monitor Active Automations Status Using WSProxy",description:"During my years working on Salesforce Marketing Cloud, I have made this mistake at least once on every particular project and there is a good chance you have done it too.",source:"@site/docs/SFMC API/MonitorAutomationsWSProxy.md",sourceDirName:"SFMC API",slug:"/SFMC API/MonitorAutomationsWSProxy",permalink:"/docs/SFMC API/MonitorAutomationsWSProxy",draft:!1,tags:[{label:"Automation Studio",permalink:"/docs/tags/automation-studio"},{label:"WSProxy",permalink:"/docs/tags/ws-proxy"},{label:"SSJS",permalink:"/docs/tags/ssjs"}],version:"current",frontMatter:{id:"MonitorAutomationsWSProxy",title:"A Way to Monitor Active Automations Status Using WSProxy",sidebar_label:"Monitor Automations with WSProxy",tags:["Automation Studio","WSProxy","SSJS"]},sidebar:"tutorialSidebar",previous:{title:"Automations Dashboard",permalink:"/docs/SFMC API/AutomationsRunTimesAPI"},next:{title:"Builders",permalink:"/docs/category/builders"}},u={},l=[{value:"Overview of the solution",id:"overview-of-the-solution",level:3},{value:"Create Automations Monitoring List Data Extension",id:"create-automations-monitoring-list-data-extension",level:2},{value:"Create CloudPage to Monitor Active Automations",id:"create-cloudpage-to-monitor-active-automations",level:2},{value:"Full Code",id:"full-code",level:2},{value:"Bonus",id:"bonus",level:2}],m={toc:l};function c(t){let{components:e,...i}=t;return(0,o.kt)("wrapper",(0,a.Z)({},m,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"During my years working on Salesforce Marketing Cloud, I have made this mistake at least once on every particular project and there is a good chance you have done it too."),(0,o.kt)("p",null,"Have you ever wanted to check/edit an activity on Automation Studio? Sure, but did you use the Activities tab opened or did it directly on the ",(0,o.kt)("strong",{parentName:"p"},"active")," ",(0,o.kt)("strong",{parentName:"p"},"automation"),"? See where is it going?"),(0,o.kt)("p",null,"When we try to open an activity on an ",(0,o.kt)("strong",{parentName:"p"},"active")," automation, SFMC prompts the box below informing us that this action would ",(0,o.kt)("strong",{parentName:"p"},"pause")," the automation. The problem is, very often, after finishing the editing of the activity, ",(0,o.kt)("strong",{parentName:"p"},"we forget to activate the automation again.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Monitor automations with WSProxy",src:n(215).Z,width:"1032",height:"446"})),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This can have some serious problems on the functioning of an SFMC instance. Especially if it have automations that run frequently and export data that can not be recovered, for example, exporting the content of a DE that is overwritten on each running occurrence.")),(0,o.kt)("p",null,"In this article, I will share with you a way to monitor active automations by checking a CloudPage that shows the current status of every automation that is supposed to be active at that specific moment. As a bonus, we can schedule an automation that runs daily and sends the list of those automations to a list of emails."),(0,o.kt)("h3",{id:"overview-of-the-solution"},"Overview of the solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a data extension that contains our active automations names along with a boolean field called ",(0,o.kt)("inlineCode",{parentName:"li"},"toBeMonitored")),(0,o.kt)("li",{parentName:"ul"},"Create a CloudPage that shows active automations current status"),(0,o.kt)("li",{parentName:"ul"},"A bonus")),(0,o.kt)("h2",{id:"create-automations-monitoring-list-data-extension"},"Create Automations Monitoring List Data Extension"),(0,o.kt)("p",null,"The data extension will be named ",(0,o.kt)("inlineCode",{parentName:"p"},"Automations_Monitoring_List"),". Basically, it will be populated once and then updated everytime we add/remove an automation on Automation Studio. It should contain all the automations that need to be Active. You can populate it manually, but if the SFMC instance is too big to do so, we can populate it automatically using SSJS/WSProxy. We can use some code snippets we have in ",(0,o.kt)("a",{parentName:"p",href:"/docs/SFMC%20API/AutomationsRunTimesAPI"},"this article")," to get the list of all automations names. The DE should look like this:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Length"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"AutomationName"),(0,o.kt)("td",{parentName:"tr",align:null},"Text"),(0,o.kt)("td",{parentName:"tr",align:null},"500")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"toBeMonitored"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Category"),(0,o.kt)("td",{parentName:"tr",align:null},"Text"),(0,o.kt)("td",{parentName:"tr",align:null},"250")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"isActive"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolen"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The primary key is the ",(0,o.kt)("inlineCode",{parentName:"p"},"AutomationName")," field. "),(0,o.kt)("p",{parentName:"admonition"},"We can disable monitoring on an automation by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"toBeMonitored")," to false. "),(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Category")," is optional if we want to sort automations. ")),(0,o.kt)("p",null,"I\u2019ll explain how we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"isActive")," field on the bonus part."),(0,o.kt)("h2",{id:"create-cloudpage-to-monitor-active-automations"},"Create CloudPage to Monitor Active Automations"),(0,o.kt)("p",null,"First of all, we need to do a lookup on ",(0,o.kt)("inlineCode",{parentName:"p"},"Automations_Monitoring_List")," DE to get the list of automations that need to be monitored. The ",(0,o.kt)("inlineCode",{parentName:"p"},"toBeMonitored")," field should be set to true."),(0,o.kt)("p",null,"We are looping through the ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieve")," results and calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"getAutomationStatus")," function to get the status of the automation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'Platform.Load("Core","1");\n\nvar api = new Script.Util.WSProxy();\n\ntry {\n/* Retreive Automations_Monitoring_List DE automations that need to be monitored  */\nvar deCustKey = \'Automations_Monitoring_List\'; \n\nvar cols = ["AutomationName", "toBeMonitored"];\nvar filter = {\n    Property: "toBeMonitored",\n    SimpleOperator: "equals",\n    Value: true\n};\n\nvar deReturn = api.retrieve("DataExtensionObject[" + deCustKey + "]", cols, filter);\nvar automationName = "";\nfor (var a = 0; a < deReturn.Results.length; a++) {\nvar results = deReturn.Results[a];\nfor (var i = 0; i < results.Properties.length; i++) {\n    var value = results.Properties[i].Value;\n    if (results.Properties[i].Name == "AutomationName") {\n        Write(Stringify(value + " : "+ getAutomationStatus(results.Properties[i].Value) + " || "));\n    }\n\n    }\n}\n} catch(err) {\nvar error = {\n    Status: 500,\n    Message: err\n}\nWrite(Stringify(error)); \n}\n')),(0,o.kt)("p",null,"The code below shows how are we retrieving the automation status and calling our second function called ",(0,o.kt)("inlineCode",{parentName:"p"},"getAutomationStatusName"),"to put a name on automations status codes. The status ",(0,o.kt)("inlineCode",{parentName:"p"},"Ready")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Running")," means that the automation is ",(0,o.kt)("inlineCode",{parentName:"p"},"Active"),". If it\u2019s the case, we return ",(0,o.kt)("inlineCode",{parentName:"p"},"Active"),", otherwise, the actual status is returned."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'/* Function to retrieve automation status */ \nfunction getAutomationStatus(automationName) {\n    var result = api.retrieve("Automation", ["Name","ProgramID","CustomerKey","Status"], {\n    Property: "Name",\n    SimpleOperator: "equals",\n    Value: automationName\n});\n\nvar automation = result.Results[0];\nvar objectId = automation.ObjectID;\nif(objectId == null) throw "No automation with the name \\"" + automationName + "\\" was found.";\nelse {\n    var status = getAutomationStatusName(automation.Status);\n    if(status == "Running" || status == "Ready") {\n        var response = "Active";\n    }\n    else var response = status;\n}\nreturn status;\n}\n\n/* Function to retrieve automation status based on returned status code - Thanks Ivan ;) */ \nfunction getAutomationStatusName(num) {\n    switch(num) {\n        case -1:\n            status = \'Error\';\n        break;\n        case 0:\n            status = \'Building error\';\n        break;\n        case 1:\n            status = \'Building\';\n        break;\n        case 2:\n            status = \'Ready\';\n        break;\n        case 3:\n            status = \'Running\';\n        break;\n        case 4:\n            status = \'Paused\';\n        break;\n        case 5:\n            status = \'Stopped\';\n        break;\n        case 6:\n            status = \'Scheduled\';\n        break;\n        case 7:\n            status = \'Awaiting trigger\';\n        break;\n        case 8:\n            status = \'Inactive trigger\';\n        break;\n    }\n    return status;\n}\n')),(0,o.kt)("p",null,"As you might have noticed, the UI is very basic. I\u2019ll let you check my other article on how to ",(0,o.kt)("a",{parentName:"p",href:"/docs/SFMC%20API/AutomationsRunTimesAPI"},"Use Lightning Design System in CloudPages"),". You can personalize the UI with the look and feel of Lightning."),(0,o.kt)("h2",{id:"full-code"},"Full Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'<script runat=\'server\'>\nPlatform.Load("Core","1");\n\nvar api = new Script.Util.WSProxy();\n\ntry {\n/* Retreive Automations_Monitoring_List DE automations that need to be monitored  */\n    var deCustKey = \'Automations_Monitoring_List\'; \n\n    var cols = ["AutomationName", "toBeMonitored"];\n    var filter = {\n        Property: "toBeMonitored",\n        SimpleOperator: "equals",\n        Value: true\n    };\n\nvar deReturn = api.retrieve("DataExtensionObject[" + deCustKey + "]", cols, filter);\nvar automationName = "";\nfor (var a = 0; a < deReturn.Results.length; a++) {\n    var results = deReturn.Results[a];\n    for (var i = 0; i < results.Properties.length; i++) {\n        var value = results.Properties[i].Value;\n        if (results.Properties[i].Name == "AutomationName") {\n            Write(Stringify(value + " : "+ getAutomationStatus(results.Properties[i].Value) + " || "));\n        }\n\n        }\n    }\n} catch(err) {\n    var error = {\n        Status: 500,\n        Message: err\n    }\n    Write(Stringify(error)); \n}\n\n/* Function to retrieve automation status */ \nfunction getAutomationStatus(automationName) {\n    var result = api.retrieve("Automation", ["Name","ProgramID","CustomerKey","Status"], {\n    Property: "Name",\n    SimpleOperator: "equals",\n    Value: automationName\n});\n\nvar automation = result.Results[0];\nvar objectId = automation.ObjectID;\nif(objectId == null) throw "No automation with the name \\"" + automationName + "\\" was found.";\nelse {\n    var status = getAutomationStatusName(automation.Status);\n    if(status == "Running" || status == "Ready") {\n        var response = "Active";\n    }\n    else var response = status;\n}\nreturn status;\n}\n\n/* Function to retrieve automation status based on returned status code - Thanks Ivan ;) */ \nfunction getAutomationStatusName(num) {\n    switch(num) {\n        case -1:\n            status = \'Error\';\n        break;\n        case 0:\n            status = \'Building error\';\n        break;\n        case 1:\n            status = \'Building\';\n        break;\n        case 2:\n            status = \'Ready\';\n        break;\n        case 3:\n            status = \'Running\';\n        break;\n        case 4:\n            status = \'Paused\';\n        break;\n        case 5:\n            status = \'Stopped\';\n        break;\n        case 6:\n            status = \'Scheduled\';\n        break;\n        case 7:\n            status = \'Awaiting trigger\';\n        break;\n        case 8:\n            status = \'Inactive trigger\';\n        break;\n    }\n    return status;\n}\n<\/script>   \n')),(0,o.kt)("h2",{id:"bonus"},"Bonus"),(0,o.kt)("p",null,"If you want to go the extra mile, there are plenty of things you can add to this process. First, create a data extension with ",(0,o.kt)("inlineCode",{parentName:"p"},"SubscriberKey")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"EmailAddress")," fields. Next, populate it with the list of contacts that need to be informed when something goes wrong. Make sure to keep it light."),(0,o.kt)("p",null,"Then, create a script activity in an automation that runs daily/hourly. The script should check the list of automations that need to be active and that are not, store this list in another DE called ",(0,o.kt)("inlineCode",{parentName:"p"},"Automations_NotActive"),", send an email to the contacts data extension after doing a lookup on ",(0,o.kt)("inlineCode",{parentName:"p"},"Automations_NotActive"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In this kind of articles, I try to give basic details about the solution. It's your job to adapt it to your use case and enhance it. After all, I believe that progress is made only by practicing.")),(0,o.kt)("p",null,"Let me know if you have any questions. Cheers!"))}c.isMDXComponent=!0},215:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/monitorAutomationsWSProxy-df55571e54f1b798614358137705a826.png"}}]);